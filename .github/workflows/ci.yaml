name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - '[vV]*'  # Matches both "v1.0.0" and "V1.0.0"
  pull_request:
    branches:
      - main
  release:
    types: [created]  # Triggers when a GitHub release is manually created

permissions:
  contents: write  # Allows GitHub Actions to upload assets

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      - name: Build
        run: cargo build --release
      - name: Run tests
        run: cargo test
      - name: Run fmt check
        run: cargo fmt -- --check
      - name: Run clippy
        run: cargo clippy -- -D warnings

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/tags/V')  # Ensure uppercase and lowercase tags trigger this job

    steps:
      - name: Debug GitHub Event
        run: |
          echo "Triggered by: ${{ github.event_name }}"
          echo "GitHub ref: ${{ github.ref }}"

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Ensure all tags are available

      - name: Get latest tag
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install GitHub CLI
        run: sudo apt update && sudo apt install gh -y

      - name: Check GitHub CLI Version
        run: gh --version

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Create GitHub Release (if missing)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "$TAG_NAME" --title "Release $TAG_NAME" --notes "Automated release" || echo "Release already exists"

      - name: Build release binary
        run: cargo build --release

      - name: Upload release binary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$TAG_NAME" ./target/release/rsfetch --clobber
